apiVersion: v1
kind: ConfigMap
metadata:
  name: watcher-hook-config
  namespace: watcher
data:
  99-watcher-hook.py: |
    from IPython import get_ipython
    import os, socket, requests
    from datetime import datetime

    ip = get_ipython()
    API_BASE = "http://watcher-backend-service.watcher.svc.cluster.local:3000"

    def after_cell_exec(result=None):
        try:
            timestamp = datetime.now().isoformat()
            cwd = os.getcwd()
            hostname = socket.gethostname()
            parts = hostname.split('-')

            class_div  = parts[1] if len(parts) > 1 else 'unknown'
            hw_name    = parts[2] if len(parts) > 2 else 'unknown'
            student_id = parts[3] if len(parts) > 3 else 'unknown'

            exit_code = 0 if (result and getattr(result, "success", False)) else 1
            cmdline = "<unknown>"

            payload = {
                "timestamp": timestamp,
                "exit_code": exit_code,
                "cmdline": cmdline,
                "cwd": cwd,
                "target_path": "ipykernel",
                "process_type": "python"
            }

            url = f"{API_BASE}/api/{class_div}/{hw_name}/{student_id}/logs/run"
            try:
                requests.post(url, json=payload, timeout=1)
            except Exception:
                pass

        except Exception as e:
            with open("/tmp/jupyter_exec_error.log", "a", encoding="utf-8") as f:
                f.write(f"[HOOK][INTERNAL ERROR] {datetime.now().isoformat()} {type(e).__name__}: {e}\n")

    ip.events.register('post_run_cell', after_cell_exec)
